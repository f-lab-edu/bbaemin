name: Build and Deploy
on: [push, pull_request]

env:
  DOCKER_IMAGE_NAME: bbaemin

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: ./gradlew --info test

      # 테스트 후 Result 보기
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }} # 테스트 실패해도 Report 보기
        with:
          files: build/test-results/**/*.xml

      - name: Clean up Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push / admin-service
        uses: docker/build-push-action@v2
        with:
          context: ./admin-service
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}/admin-service:latest

      - name: Build and Push / user-service
        uses: docker/build-push-action@v2
        with:
          context: ./user-service
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}/user-service:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH Connect & Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCLOUD_DEV_HOST_IP }}
          username: ${{ secrets.NCLOUD_DEV_USERNAME }}
          password: ${{ secrets.NCLOUD_DEV_PASSWORD }}
          port: ${{ secrets.NCLOUD_DEV_PORT }}
          script: |
            cd ~
            docker-compose pull
            docker-compose up --force-recreate --build -d


